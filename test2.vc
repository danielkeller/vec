`a + -b * `c + d;
a / (b:`c++) / d{foof};

a = 2, x = 
(
`a && b;
if (a = 6)
2, y : 8*9;
b
);
return x + 6;

//TODO: don't expand types until sema phase.
//then, recursively expand along with everything else

//insert typedefs from function type params into function
//body's scope... somehow. they'd be useful though

//it might be nice to be able to output a compunit before
//sema so as to skip parsing of standard libs every time

//could do variadic templates:
//ie type foo?[A, B, ...] = [A first, B second, {[...]}];
//or whatever
//or have something that expands tuples into others like [a,b,?...]

//lambda syntax could be double parens (( a+b ))

//add storage duration specifier agg
//acts like static except initializer is run on first call to agg function
